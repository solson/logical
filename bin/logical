#!/usr/bin/env ruby
require 'logical'

if ARGV[0] == "repl"
  require 'ripl'
  Ripl.start
  exit
end

def ask(prompt)
  print prompt
  gets.chomp
end

def string_eval(line, context)
  ast = Logical::Parser.parse(Logical::Lexer.lex(line))
  puts ast.inspect + " => " + ast.evaluate(context).inspect
rescue RLTK::NotInLanguage
  puts 'Line was not in language.'
rescue Exception => e
  puts e.to_s
end

def ascii_table(table, vars, expr)
  vars.sort!
  vars_width = vars.count * 2
  expr_width = expr.inspect.length + 1

  out = ''
  out << vars.join(' ') << ' | ' << expr.inspect << "\n"
  out << ('-' * vars_width) << '+' << ('-' * (expr_width)) << "\n"
  table.each do |context, value|
    vars.each do |var|
      out << (context[var] ? 'T' : 'F') << ' '
    end
    out << '| ' << (value ? 'T' : 'F') << "\n"
  end
  out
end

def truth_table(line)
  ast = Logical::Parser.parse(Logical::Lexer.lex(line))
  situations = [true,false].repeated_permutation(ast.vars.count)
  contexts = situations.map{|xs| Hash[*ast.vars.zip(xs).flatten(1)] }
  table = contexts.map do |context|
    [context, ast.evaluate(context)]
  end
  puts ascii_table(table, ast.vars, ast)
end

context = {}
loop do
  begin
    line = ask('> ')
  rescue StandardError, Interrupt
    puts
    exit
  end

  break if line == 'quit' or line == 'exit'

  if line =~ /^table\s*(.*)$/
    truth_table($1)
  else
    string_eval(line, context)
  end
end
